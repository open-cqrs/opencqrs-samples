CREATE TABLE IF NOT EXISTS EVENTHANDLER_LOCK  (
	LOCK_KEY CHAR(36) NOT NULL,
	REGION VARCHAR(100) NOT NULL,
	CLIENT_ID CHAR(36),
	CREATED_DATE TIMESTAMP NOT NULL,
	constraint EVENTHANDLER_LOCK_PK primary key (LOCK_KEY, REGION)
);

CREATE TABLE IF NOT EXISTS EVENTHANDLER_PROGRESS (
    GROUP_KEY VARCHAR(100) NOT NULL,
    PARTITION_ID BIGINT NOT NULL,
    EVENT_ID VARCHAR(100) NOT NULL,
    constraint EVENTHANDLER_PROGRESS_PK primary key (GROUP_KEY, PARTITION_ID)
);

CREATE SEQUENCE IF NOT EXISTS INT_MESSAGE_SEQ START WITH 1 INCREMENT BY 1 NO CYCLE;

CREATE TABLE IF NOT EXISTS INT_CHANNEL_MESSAGE (
                                     MESSAGE_ID CHAR(36) NOT NULL,
                                     GROUP_KEY CHAR(36) NOT NULL,
                                     CREATED_DATE BIGINT NOT NULL,
                                     MESSAGE_PRIORITY BIGINT,
                                     MESSAGE_SEQUENCE BIGINT NOT NULL DEFAULT nextval('INT_MESSAGE_SEQ'),
                                     MESSAGE_BYTES BYTEA,
                                     REGION VARCHAR(100) NOT NULL,
                                     constraint INT_CHANNEL_MESSAGE_PK primary key (REGION, GROUP_KEY, CREATED_DATE, MESSAGE_SEQUENCE)
);

CREATE INDEX IF NOT EXISTS INT_CHANNEL_MSG_DELETE_IDX ON INT_CHANNEL_MESSAGE (REGION, GROUP_KEY, MESSAGE_ID);

-- Triggering the NOTIFY-mechanism

CREATE OR REPLACE FUNCTION INT_CHANNEL_MESSAGE_NOTIFY_FCT()
RETURNS TRIGGER AS
 $BODY$
 BEGIN
     PERFORM pg_notify('int_channel_message_notify', NEW.REGION || ' ' || NEW.GROUP_KEY);
     RETURN NEW;
 END;
 $BODY$
 LANGUAGE PLPGSQL;

 CREATE OR REPLACE TRIGGER INT_CHANNEL_MESSAGE_NOTIFY_TRG
 AFTER INSERT ON INT_CHANNEL_MESSAGE
 FOR EACH ROW
 EXECUTE PROCEDURE INT_CHANNEL_MESSAGE_NOTIFY_FCT();

-- Delete Message Channel Entries older than 10 seconds on each insert

CREATE OR REPLACE FUNCTION cleanup_old_messages()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM INT_CHANNEL_MESSAGE
    WHERE CREATED_DATE < (EXTRACT(EPOCH FROM NOW()) * 1000) - 10000;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER cleanup_messages_trigger
AFTER INSERT ON INT_CHANNEL_MESSAGE
FOR EACH STATEMENT
EXECUTE FUNCTION cleanup_old_messages();